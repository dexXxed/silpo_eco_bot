from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from aiogram.types.message import ContentType
import logging
import os
from pyzbar.pyzbar import decode
import cv2
import pandas as pd
from dotenv import load_dotenv
from tinydb import TinyDB, Query

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot)
db = TinyDB('db.json')

barcodes = pd.read_csv('barcodes.csv')


def barcode_reader(image):
    global barcode

    detected_barcodes = decode(cv2.imread(image))

    if not detected_barcodes:
        return ''
    else:
        # Traverse through all the detected barcodes in image
        for barcode in detected_barcodes:
            if barcode.data != '':
                return str(barcode.data.decode("utf-8"))


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    response = """–ü—Ä–∏–≤—ñ—Ç ü§ó 
    
–Ø  ü§ñ, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –ø–æ—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–≤–æ—î —Å–º—ñ—Ç—Ç—è!

–ù–∞—Ç–∏—Å–Ω–∏:
/how_it_works –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ —Ä–æ–±–æ—Ç–∏ ü§ñ —Ç–∞ –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
/trash_info –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–ø—É—Å—Ç–∏–º–æ—ó –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏ ‚ôª
/prepare_trash –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è <b>"–Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏?"</b> üè°
"""
    user = Query()
    if not db.search(user.username == message.from_user.id):
        db.insert({'username': message.from_user.id,
                   'metal': 0,
                   'paper': 0,
                   'glass': 0,
                   'plastic': 0})
    await message.answer(response, parse_mode=ParseMode.HTML)\



@dp.message_handler(commands=['how_it_works'])
async def how_it_works(message: types.Message):
    response = """–í—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ —Ç–∞—Ä - –º–∏ –ø—ñ–¥–∫–∞–∂–µ–º–æ —á–∏ –º–æ–∂–Ω–∞ —ó—Ö –ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ —Ç–∞ —è–∫ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏. üì±
    
1. –î–æ –ø—Ä–∏—ó–∑–¥—É –∫—É—Ä‚Äô—î—Ä–∞ –≥–æ—Ç—É—î—Ç–µ —Å–º—ñ—Ç—Ç—è, –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–≤—à–∏ –π–æ–≥–æ –Ω–∞ –≤—Ç–æ—Ä–∏–Ω–Ω—É —Å–∏—Ä–æ–≤–∏–Ω—É –∑–∞ —Ü—ñ—î—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é - /prepare_trash

2. –†–æ–±–∏—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ shop.silpo.ua –∑ –ø–ª–∞–Ω–æ–≤–æ—é –¥–æ—Å—Ç–∞–≤–∫–æ—é –Ω–∞ –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —á–∞—Å ‚è≤

3. –ó–∞–±–∏—Ä–∞—î—Ç–µ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –∑–∞–æ–¥–Ω–æ –ø—Ä–æ—â–∞—î—Ç–µ—Å—è –∑ –≤—ñ–¥—Ö–æ–¥–∞–º–∏ ‚ôª

4. –ó–Ω–∞—î—Ç–µ, —â–æ –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∞ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—é SilpoRecycling –≤—ñ–¥ —Ç–æ–≥–æ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—è –∫—Ä–∞—â–µ. üè≠

5. –û—Ç—Ä–∏–º–∞—î—Ç–µ –±–æ–Ω—É—Å–∏ –Ω–∞ –≤–ª–∞—Å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫! üéÅ

"""
    await message.answer(response, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['trash_info'])
async def trash_info(message: types.Message):
    response = """–°—Ç–∞–Ω—Ü—ñ—è —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏:

–ü–ê–ü–Ü–† üì∞:
–¢–µ—Ç—Ä–∞–ø–∞–∫, –ø–∞–ø–µ—Ä–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞, –∫–∞—Ä—Ç–æ–Ω, –ø–∞–ø–µ—Ä–æ–≤—ñ –ø–∞–∫–µ—Ç–∏ —Ç–∞ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏.

–ü–õ–ê–°–¢–ò–ö ‚ô≥:
–ü—Ä–æ–∑–æ—Ä—ñ –ø–ª—è—à–∫–∏ –ü–ï–¢, –ø–ª—è—à–∫–∏ –≤—ñ–¥ –ø–æ–±—É—Ç–æ–≤–æ—ó —Ö—ñ–º—ñ—ó HDPE, –∫—Ä–∏—à–µ—á–∫–∏ –≤—ñ–¥ –ø–ª—è—à–æ–∫, —Å—Ç—Ä–µ—Ç—á-–ø–ª—ñ–≤–∫–∞

–ú–ï–¢–ê–õ ü•´:
–ê–ª—é–º—ñ–Ω—ñ—î–≤—ñ –±–∞–Ω–∫–∏

–°–ö–õ–û üçæ:
–°–∫–ª—è–Ω—ñ –ø–ª—è—à–∫–∏
"""
    await message.answer(response, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['prepare_trash'])
async def trash_info(message: types.Message):
    response = """<b>–Ø–ö –ü–Ü–î–ì–û–¢–£–í–ê–¢–ò?</b>
–ê–±–∏ –∑—ñ —Å–º—ñ—Ç—Ç—è –∑—Ä–æ–±–∏—Ç–∏ –≤—Ç–æ—Ä–∏–Ω–Ω—É —Å–∏—Ä–æ–≤–∏–Ω—É, –≤–∏–∫–æ–Ω—É–π—Ç–µ —Ç—Ä–∏ –ø—Ä–æ—Å—Ç—ñ –ø—Ä–∞–≤–∏–ª–∞:

1. –í–Ü–î–°–û–†–¢–û–í–£–ô–¢–ï ‚ôª
–°–∫–ª–æ, –º–µ—Ç–∞–ª, –ø–∞–ø—ñ—Ä —Ç–∞ –ø–ª–∞—Å—Ç–∏–∫ —Å–∫–ª–∞–¥–∞–π—Ç–µ –æ–∫—Ä–µ–º–æ. –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ —Ä–µ—á—ñ, —è–∫—ñ –º–æ–∂–Ω–∞ (—ñ –Ω–µ –º–æ–∂–Ω–∞) –∑–¥–∞—Ç–∏ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–∏—â–µ. –ù–µ –∫–ª–∞–¥—ñ—Ç—å –¥–æ –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏ ¬´–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö¬ª –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –∞–±–∏ —Ü–µ –±—É–ª–æ –¥—ñ–π—Å–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç–∞ –µ–∫–æ–ª–æ–≥—ñ—á–Ω–æ.

2. –ú–ò–ô–¢–ï üåä
–°—Ç–∞–Ω—Ü—ñ—è –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ª–∏—à–µ —á–∏—Å—Ç—ñ —Ç–∞ —Å—É—Ö—ñ —É–ø–∞–∫–æ–≤–∫–∏. –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–º–∏—Ç–∏ —â–æ—Å—å ‚Äî –∫—Ä–∞—â–µ –≤–∏–∫–∏–Ω—É—Ç–∏ —Ü–µ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–º—ñ—Ç–Ω–∏–∫–∞, –Ω—ñ–∂ –∑–∞–±—Ä—É–¥–Ω–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤—ñ–¥—Ö–æ–¥–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ —ó—Ö –Ω–µ–ø—Ä–∏–¥–∞—Ç–Ω–∏–º–∏ –¥–æ –∑–¥–∞—á—ñ.

3. –°–¢–ò–°–ö–ê–ô–¢–ï üß≥
–ü–∞–ø—ñ—Ä, –∫–∞—Ä—Ç–æ–Ω, –±–ª—è—à–∞–Ω–∫–∏ —Ç–∞ –ø–ª—è—à–∫–∏ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—è —è–∫–æ–º–æ–≥–∞ —Å–∏–ª—å–Ω—ñ—à–µ —Å—Ç–∏—Å–Ω—É—Ç–∏, –∞–±–∏ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥—Ö–æ–¥–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ. –û–±‚Äô—î–º –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏ –Ω–µ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 60 –ª—ñ—Ç—Ä—ñ–≤ (—Ü–µ —è–∫ –º—ñ—à–æ–∫ —Ü—É–∫—Ä—É).
"""
    await message.answer(response, parse_mode=ParseMode.HTML)
    await bot.send_photo(message.from_user.id, open('./photos/1.png', 'rb'), caption='1. –í–Ü–î–°–û–†–¢–û–í–£–ô–¢–ï ‚ôª')
    await bot.send_photo(message.from_user.id, open('./photos/2.png', 'rb'), caption='2. –ú–ò–ô–¢–ï üåä')
    await bot.send_photo(message.from_user.id, open('./photos/3.png', 'rb'), caption='3. –°–¢–ò–°–ö–ê–ô–¢–ï üß≥')


@dp.message_handler(content_types=ContentType.PHOTO)
async def get_type_of_barcode(message: types.Message):
    await message.photo[-1].download(destination_file=f'photos/{message.photo[1].file_id}.jpg')

    bar_code = barcode_reader(f'photos/{message.photo[1].file_id}.jpg')
    os.remove(f'photos/{message.photo[1].file_id}.jpg')

    if bar_code != '':
        if not barcodes[barcodes['id'].str.contains(bar_code)].empty:
            user = Query()
            db.update({f'{barcodes[barcodes["id"].str.contains(bar_code)].min()["class"]}': db.search(user.username == message.from_user.id)[0][f'{barcodes[barcodes["id"].str.contains(bar_code)].min()["class"]}'] + 1 }, user.username == message.from_user.id)

            await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {barcodes[barcodes['id'].str.contains(bar_code)].min()['name']}\n"
                                f"–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {barcodes[barcodes['id'].str.contains(bar_code)].min()['class']}",
                                parse_mode=ParseMode.HTML)
        else:
            await message.reply('–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!')
    else:
        await message.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ, —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")


@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    user = Query()
    await message.reply(f"""–í–∞–º–∏ –±—É–ª–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–æ –∑–∞–≥–∞–ª–æ–º {db.search(user.username == message.from_user.id)[0]['paper'] + db.search(user.username == message.from_user.id)[0]['plastic'] + db.search(user.username == message.from_user.id)[0]['metal'] + db.search(user.username == message.from_user.id)[0]['glass']} –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: 

–ü–ê–ü–ï–†–£ üì∞: {db.search(user.username == message.from_user.id)[0]['paper']} —à—Ç.

–ü–õ–ê–°–¢–ò–ö ‚ô≥: {db.search(user.username == message.from_user.id)[0]['plastic']} —à—Ç.

–ú–ï–¢–ê–õ ü•´: {db.search(user.username == message.from_user.id)[0]['metal']} —à—Ç.

–°–ö–õ–û üçæ: {db.search(user.username == message.from_user.id)[0]['glass']} —à—Ç.
""")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
